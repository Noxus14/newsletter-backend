BEGIN;


CREATE TABLE IF NOT EXISTS public.newslettersubs
(
    id integer NOT NULL DEFAULT nextval('newslettersubs_id_seq'::regclass),
    category character varying(100) COLLATE pg_catalog."default",
    from_user character varying(100) COLLATE pg_catalog."default",
    to_user character varying(100) COLLATE pg_catalog."default",
    subject character varying(100) COLLATE pg_catalog."default",
    text_body character varying(1000) COLLATE pg_catalog."default",
    html character varying(1000) COLLATE pg_catalog."default",
    CONSTRAINT newslettersubs_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.roles
(
    id integer NOT NULL DEFAULT nextval('roles_id_seq'::regclass),
    name character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT roles_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.user_to_newsletter
(
    id integer NOT NULL DEFAULT nextval('user_to_newsletter_id_seq'::regclass),
    id_user integer,
    id_newslettersubs integer,
    CONSTRAINT user_to_newsletter_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.users
(
    id integer NOT NULL DEFAULT nextval('users_id_seq'::regclass),
    id_role integer,
    name character varying(50) COLLATE pg_catalog."default",
    email character varying(100) COLLATE pg_catalog."default",
    password character varying(250) COLLATE pg_catalog."default",
    issubcribe boolean,
    CONSTRAINT users_pkey PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public.user_to_newsletter
    ADD CONSTRAINT id_newslettersubs FOREIGN KEY (id_newslettersubs)
    REFERENCES public.newslettersubs (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.user_to_newsletter
    ADD CONSTRAINT id_user FOREIGN KEY (id_user)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.users
    ADD CONSTRAINT id_role FOREIGN KEY (id_role)
    REFERENCES public.roles (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

END;